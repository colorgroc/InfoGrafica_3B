#version 330 core

struct Material{
	sampler2D texSpecular;
	sampler2D texDiffuse;
	float shininess;
};
uniform Material material;

in vec2 texcoords;
in vec3 FragPos;
in vec3 Normal;
uniform vec3 lightPos; 
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;
uniform float constant;
uniform float linear;
uniform float quadratic;

out vec4 color;

void main(){
	float ambientStrength = 0.1f;
    vec3 ambient = ambientStrength * lightColor;
	
	float difStreng = 0.5f;
	vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = difStreng * diff * lightColor * vec3(texture(material.texDiffuse, texcoords));
	
	float specStrng = 0.5f;
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir),0.0), 32);
	vec3 especular = specStrng * spec * lightColor * vec3(texture(material.texSpecular, texcoords));
	
	
	float distance = length(lightPos - FragPos);
    float attenuation = 1.0f / (constant + linear * distance + 
	quadratic * (distance * distance)); 

	color = vec4(attenuation * (ambient + diffuse + especular) 
	* objectColor, 1.0);
}

