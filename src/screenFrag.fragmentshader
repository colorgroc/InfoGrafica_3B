#version 330 core
in vec2 TexCoords;
out vec4 color;

uniform sampler2D screenTexture;
uniform int postProcessing;
const float blurSizeH = 1.0 / 500.0;
const float blurSizeV = 1.0 / 500.0;
uniform float gamma;
float PI = 3.14159f;

void main()
{ 
	if (postProcessing == 0)
		color = texture(screenTexture, TexCoords);
		
	else if(postProcessing == 1) //inversion colores
		color = vec4(vec3(1.0 - texture(screenTexture, TexCoords)), 1.0);
		
	else if(postProcessing == 2){ //blur
		vec4 sum = vec4(0.0);
		for (int x = -4; x <= 4; x++)
			for (int y = -4; y <= 4; y++)
				sum += texture(screenTexture,vec2(TexCoords.x + x * blurSizeH, TexCoords.y + y * blurSizeV)) / 81.0;
				color = sum;
			}
	else if(postProcessing == 3){ //correccion gamma
		vec3 fragColor = pow((texture(screenTexture, TexCoords)).rgb, vec3(1.0/gamma));
		color = vec4(fragColor, 1.0);
	}

	else if(postProcessing == 4){ //efecto ondulado 
		//las funciones trigonometricas ayudan a crear este efecto ondulado.
		float freq = 100.f;
		float amplitud = 0.01;
		vec2 texCoord = TexCoords;
		texCoord.y = texCoord.y + sin(texCoord.x * freq)*amplitud;
		color = texture(screenTexture, texCoord);
	}

	else if(postProcessing == 5){ //pixelado
	
		float pixels = 248.0f;
        float anchRect = 5.0f * (1.0 / pixels);
        float altRect = 5.0f * (1.0 / pixels);
		//floor recoje los valores (decimales) más pequeños, más cerca del .0
        vec2 Coord = vec2(anchRect * floor(TexCoords.x / anchRect), altRect * floor(TexCoords.y / altRect));
        color = texture(screenTexture, Coord);
	}
}
