#version 330 core
in vec2 TexCoords;
out vec4 color;

uniform sampler2D screenTexture;
uniform int postProcessing;
const float blurSizeH = 1.0 / 500.0;
const float blurSizeV = 1.0 / 500.0;
uniform float gamma;
uniform float offset;
float sharpAmount = 30.0f;

void main()
{ 
	if (postProcessing == 0)
		color = texture(screenTexture, TexCoords);
	else if(postProcessing == 1)
		color = vec4(vec3(1.0 - texture(screenTexture, TexCoords)), 1.0);
	else if(postProcessing == 2){
		vec4 sum = vec4(0.0);
		for (int x = -4; x <= 4; x++)
			for (int y = -4; y <= 4; y++)
				sum += texture(screenTexture,vec2(TexCoords.x + x * blurSizeH, TexCoords.y + y * blurSizeV)) / 81.0;
				color = sum;
			}
	else if(postProcessing == 3){
		vec3 fragColor = pow((texture(screenTexture, TexCoords)).rgb, vec3(1.0/gamma));
		color = vec4(fragColor, 1.0);
	}
	else if(postProcessing == 4){
		vec2 texCoord = TexCoords;
		texCoord.x += sin(texCoord.y * 4*2*3.14159 + offset)/100;
		color = texture(screenTexture, texCoord);
	}
	else if(postProcessing == 5){

		color = texture(screenTexture, TexCoords);
		color.r *= sin(TexCoords.y*100);
		color.g *= cos(TexCoords.y*200);
		color.b *= sin(TexCoords.y*300);
	}
	else if(postProcessing == 6){
		vec2 texCoord = TexCoords;
		texCoord.y = texCoord.y + sin(texCoord.x * 200)*0.01;
		color = texture(screenTexture, texCoord);
	}
	else if(postProcessing == 7){
		vec2 texCoord = TexCoords;
		color.rgb = vec3(0.5f, 0.5f, 0.5f);
		color.a = 1.0f;
		color -= texture(screenTexture, texCoord - 0.0001f)*sharpAmount;
		color += texture(screenTexture, texCoord + 0.0001f)*sharpAmount;
	
		//color = vec4((color.r + color.g + color.b)/3.0f, 1.0f); //no va
	}
}
