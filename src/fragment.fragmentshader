#version 330 core

#define NUM_MAX_PLIGHTS 4
#define NUM_MAX_SLIGHTS 4

struct Material{
	sampler2D texSpecular;
	sampler2D texDiffuse;
	float shininess;
};

uniform sampler2D tex;


struct DirectionLight{
	vec3 lightColor;
	vec3 lightdir;
	vec3 objectColor;
	//vec3 viewPos;
	vec3 dirDiffuse;
	vec3 dirSpec;
	vec3 dirAmbient;
};
uniform DirectionLight directionLight;

struct FocalLight{
//vec3 viewPos;
	vec3 lightColor;
	vec3 lightdir;
	vec3 objectColor;
	vec3 lightPos;
	float c1;
	float c2;
	float c3;
	float aperturaMx;
	float aperturaMn;
	vec3 focDiffuse;
	vec3 focSpec;
	vec3 focAmbient;
	//float numLight;
};


struct PointLight{
	//vec3 viewPos;
	vec3 lightColor;
	vec3 objectColor;
	vec3 lightPos;
	float c1;
	float c2;
	float c3;
	vec3 pointDiffuse;
	vec3 pointSpec;
	vec3 pointAmbient;
	float numLight;
};


uniform PointLight pointLight[NUM_MAX_PLIGHTS];
uniform FocalLight focalLight[NUM_MAX_SLIGHTS];
uniform vec3 viewPos;

out vec4 color;
in vec2 TexCoords;

in vec3 FragPos;  
in vec3 Normal;

vec3 CalcDirLight(DirectionLight light);
vec3 CalcFocLight(FocalLight light);
vec3 CalcPointLight(PointLight light);



void main(){

	vec4 res = texture(tex, TexCoords);
	res.rgb = CalcDirLight(directionLight);

	
	for(int i = 0; i< NUM_MAX_PLIGHTS; i++){
		res.rgb += CalcPointLight(pointLight[i]);
	}
	
	for(int i = 0; i< NUM_MAX_SLIGHTS; i++){
		res.rgb += CalcFocLight(focalLight[i]);
	}
	
	color = vec4 (res.rgb , 1.0);


}

vec3 CalcDirLight(DirectionLight light){

    vec3 ambient = light.dirAmbient * light.lightColor;
	
	vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(-light.lightdir);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.dirDiffuse * diff * light.lightColor;

	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir),0.0), 32);
	vec3 especular = light.dirSpec *spec * light.lightColor;
	vec3 res = (ambient + especular + diffuse) * light.objectColor;
	return res;
}

vec3 CalcFocLight(FocalLight light){
	float Phi = cos(radians(light.aperturaMx)); //apertura del foco
	vec3 lightDir = normalize(light.lightPos - FragPos);

	float Theta = dot(lightDir,normalize(-light.lightdir));
	float d = length(light.lightPos-FragPos);
	float Fatt = 1/(light.c1+(light.c2*d)+0.032*(d*d));
	
	float epsilon = cos(Phi)-cos(light.aperturaMn);
	float Intensidad = clamp((Phi - Theta)/epsilon, 0,1);

		vec3 ambient = light.focAmbient * light.lightColor;
  	
		// Diffuse 
		vec3 norm = normalize(Normal);
		
		float diff = max(dot(norm, lightDir), 0.0);
		
		vec3 diffuse = light.focDiffuse * diff * light.lightColor;
    
		// Specular
		vec3 viewDir = normalize(viewPos - FragPos);
		vec3 reflectDir = reflect(-lightDir, norm);  
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
		vec3 specular = light.focSpec * spec * light.lightColor;
		diffuse *= Intensidad;
		specular *= Intensidad;
		
		vec3 res =(Fatt*(ambient + diffuse + specular)) * light.objectColor;
		return res;

}

vec3 CalcPointLight(PointLight light){
    vec3 ambient = light.pointAmbient * light.lightColor;
	
	vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.lightPos - FragPos);
	
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.pointDiffuse * diff * light.lightColor ;
	
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir),0.0), 32);
	vec3 especular = light.pointSpec * spec * light.lightColor;
	
	
	float d = length(light.lightPos - FragPos);
	float attenuation = 1/(light.c1+(light.c2*d)+0.2*(d*d));
	vec3 res = (attenuation * (ambient + diffuse + especular) * light.objectColor);
	
	return res;
}