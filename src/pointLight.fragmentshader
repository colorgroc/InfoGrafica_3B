#version 330 core

struct pointLight
{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	
	float constant;
	float linear;
	float quadratic;
};
uniform pointLight light;

in vec3 FragPos;
in vec3 Normal;
uniform vec3 lightPos; 
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;

out vec4 color;

vec3 calcPointLight(pointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main(){
	vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);
	
	vec3 finalColor = calcPointLight(light, Normal, FragPos, viewDir);
	
	color = vec4(finalColor, 1.0);
}

vec3 calcPointLight(pointLight light, vec3 normal, vec3 fragPos, vec3 viewDir){
	float ambientStrength = 0.1f;
    vec3 ambient = ambientStrength * lightColor;
	
	vec3 lightDir = normalize(light.position - fragPos);
	float diff = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = light.diffuse * diff * objectColor;
	
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir),0.0), 32);
	vec3 especular = light.specular * spec * objectColor;
	
	float distance = length(light.position - fragPos);
    float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));   

	ambient *= attenuation;
	diffuse *= attenuation;
	especular *= attenuation;
	
	return (ambient + diffuse + especular);
}