#version 330 core

struct Material{
	sampler2D texSpecular;
	sampler2D texDiffuse;
	float shininess;
};
uniform Material material;

out vec4 color;
in vec2 TexCoords;

in vec3 FragPos;  
in vec3 Normal;  
  
uniform vec3 lightPos; 
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 cubeColor;
uniform vec3 lightDirection;

void main()
{

	float Phi = cos(radians(45.0f)); //apertura del foco
	vec3 lightDir = normalize(lightPos - FragPos);
	float Theta = dot(lightDir,normalize(-lightDirection));
	float d = length(lightPos-FragPos);
	float Fatt = 1/(1.0+0.7*d+1.8*pow(d,2));
	
	float epsilon = cos(Phi)-cos(20.0f);
	float Intensidad = clamp((Theta - Phi)/epsilon, 0,1);

	
	
	if(Theta > Phi){
		// Ambient
		float ambientStrength = 0.1f;
		vec3 ambient = ambientStrength * lightColor* vec3(texture(material.texDiffuse, TexCoords));
  	
		// Diffuse 
		vec3 norm = normalize(Normal);
		
		float diff = max(dot(norm, lightDir), 0.0);
		
		vec3 diffuse = diff * lightColor * vec3(texture(material.texDiffuse, TexCoords));
    
		// Specular
		float specularStrength = 0.5f;
		vec3 viewDir = normalize(viewPos - FragPos);
		vec3 reflectDir = reflect(-lightDir, norm);  
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
		vec3 specular = specularStrength * spec * lightColor * vec3(texture(material.texDiffuse, TexCoords));
		
		diffuse *= Intensidad;
		specular *= Intensidad;
		
		vec3 result = (Fatt*(ambient + diffuse + specular)) * cubeColor;
		color = vec4(result, 1.0f);
	}
	else{
		float ambientStrength = 0.1f;
		vec3 ambient = ambientStrength * lightColor;
		vec3 result = (Fatt*ambient) * cubeColor;
		color =  vec4(result, 1.0f);
		
	}
}