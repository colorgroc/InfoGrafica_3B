#version 330 core

struct dirLight
{
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
uniform dirLight light;

in vec3 FragPos;
in vec3 Normal;
//uniform vec3 lightPos; 
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;

vec3 calDirLight(dirLight light, vec3 normal, vec3 viewDir);
out vec4 color;

void main(){
	vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);

	vec3 finalColor = calDirLight(light, Normal, viewDir)*objectColor;
	
	color = vec4(finalColor, 1.0);
}

vec3 calDirLight(dirLight light, vec3 normal, vec3 viewDir){	
	//float ambientStrength = 0.1f;
    vec3 ambient = light.ambient * lightColor;
	
	vec3 lightDir = normalize(-light.direction);
	float diff = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = light.diffuse * diff * lightColor;
	
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir),0.0), 32);
	vec3 specular = light.specular * spec * lightColor;
	
	return (specular + diffuse + ambient);
}