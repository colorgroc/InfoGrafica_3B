#version 330 core

in vec3 FragPos;
in vec3 Normal;
uniform vec3 lightPos; 
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;

uniform float constant;
uniform float linear;
uniform float quadratic;
uniform vec3 focoDir;
uniform float aperturaMx;
uniform float aperturaMn;

out vec4 color;

void main(){
	vec3 lightDir = normalize(lightPos - FragPos);
	float theta = dot(lightDir,normalize(-focoDir));
	
	if(theta > aperturaMx){
		float ambientStr = 0.1f;
		vec3 ambient = ambientStr * lightColor;
		
		float difStreng = 0.5f;
		vec3 norm = normalize(Normal);
		vec3 lightDir = normalize(lightPos - FragPos);
		float diff = max(dot(norm, lightDir), 0.0);
		vec3 diffuse = difStreng * diff * lightColor;
		
		float specStrng = 0.5f;
		vec3 viewDir = normalize(viewPos - FragPos);
		vec3 reflectDir = reflect(-lightDir, norm);
		float spec = pow(max(dot(viewDir, reflectDir),0.0), 32);
		vec3 especular = specStrng * spec * lightColor;
	
		float distance = length(lightPos - FragPos);	
		float attenuation = 1.0f / (constant + linear * distance + quadratic * (distance * distance)); 
	
		float epsilon = cos(aperturaMn - aperturaMx);
		float inte = clamp((cos(theta)-cos(aperturaMx)) / cos(epsilon), 0, 1);
	
		ambient *= inte * attenuation;
		especular *= inte * attenuation;
		diffuse *= inte * attenuation;
		color = vec4(((diffuse + especular + ambient) * objectColor), 1.0);
	}
	else{
		float ambientStr = 0.3f;
		vec3 ambient = ambientStr * lightColor;
		
		float distance = length(lightPos - FragPos);	
		float attenuation = 1.0f / (constant + linear * distance 
		+ quadratic * (distance * distance)); 
		
		color = vec4(( attenuation * ambient * objectColor), 1.0);
	}
}